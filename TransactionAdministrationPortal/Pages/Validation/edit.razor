@page "/validation/{masterid:long}/edit/{id:long}"
@using TransactionProcessor.Entities
@using TransactionProcessor.Entities.Validation
@using TransactionProcessor.Entities.Condition
@inject HttpClient Http
@inject IApplicationConfiguration config
@inject IUriHelper UriHelper

<div class="card mt-3">
    <div class="card-header h2">
        <button class="btn btn-light" onclick="@Back"><Icon Name="chevron-left"></Icon> Back</button>
        Edit Validation
    </div>
    <div class="card-body">
        <dl class="row">
            <dt class="col-2">Field:</dt>
            <dd class="col-10">@dataDefinition.Path</dd>
        </dl>
    </div>
</div>

<div class="card mt-3">
    <div class="card-header h2">
        Validation Detail
    </div>
    <div class="card-body">
        <div class="form-group form-inline">
            <label for="shouldbevalid">Validation</label>
            <select class="form-control ml-3 mr-3">
                <option value="true">is successful</option>
                <option value="false">fails</option>
            </select>
            <label for="shouldbevalid">when the following is true:</label>
        </div>
        <button class="btn btn-primary" onclick="@addValidation"><Icon Name="plus"></Icon> Add Validation</button>
        @if (validations?.Any() == true)
        {
            @foreach (var validation in validations)
            {
                <text>???</text>
            }
        }
        else
        {
            <NoItems></NoItems>
        }
    </div>
</div>

<div class="card mt-3">
    <div class="card-header h2">
        Validation Conditions
    </div>
    <div class="card-body">
        <div class="form-group form-inline">
            <select class="form-control mr-3">
                <option value="true">Run</option>
                <option value="false">Don't run</option>
            </select>
            <label>this validation when the following is true:</label>
        </div>
        <div class="list-group">
            <div class="list-group-item">
                <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <Icon Name="plus" /> Add
                </button>
                <div class="dropdown-menu">
                    <button type="button" class="dropdown-item" onclick="@addCondition">
                        Condition
                    </button>
                    <button type="button" class="dropdown-item" onclick="@addConditionGroup">
                        Condition Group
                    </button>
                </div>
                    @if (conditions.ChildrenGroups.Any())
                    {
                        <ConditionGroupCardList ConditionGroups="@conditions.ChildrenGroups" />
                    }
                    @if (conditions.Conditions.Any())
                    {
                        <ConditionCardList Conditions="@conditions.Conditions" />
                    }
                    @if (!conditions.ChildrenGroups.Any() && !conditions.Conditions.Any())
                    {
                        <div class="d-flex justify-content-center h2">
                            Always
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

@functions {
    private ConditionGroup conditions { get; set; } = new ConditionGroup { Not = false, Or = false, ChildrenGroups = new List<ConditionGroup>(), Conditions = new List<Condition>() };
    private ICollection<Validation> validations { get; set; } = new HashSet<Validation>();
    private DataDefinitionTree dataDefinition { get; set; } = new DataDefinitionTree();
    private bool loading = true;
    private string ReturnPath { get => $"/validation/{masterid}"; }

    [Parameter]
    private long id { get; set; }

    [Parameter]
    private long masterid { get; set; }

    protected override async Task OnInitAsync()
    {
        dataDefinition = await Http.GetJsonAsync<DataDefinitionTree>($"{config.ApiUrl}/datadefinition/{masterid}/tree/{id}");
        loading = false;
    }

    private async Task HandleValidSubmit()
    {
        var result = await Http.SendJsonAsync<DataDefinition>(HttpMethod.Put, $"{config.ApiUrl}/datadefinition/{id}", dataDefinition);
        Back();
    }

    private void Back()
    {
        UriHelper.NavigateTo(ReturnPath);
    }

    private void addValidation()
    {
        validations.Add(new Validation());
    }

    private void addCondition()
    {
        conditions.Conditions.Add(new Condition { Or = false, Not = false, Order = nextConditionOrder, DataType = "Text" });
    }

    private void addConditionGroup()
    {
        conditions.ChildrenGroups.Add(new ConditionGroup { Or = false, Not = false, Order = nextConditionGroupOrder, ChildrenGroups = new List<ConditionGroup>() });
    }

    private int nextConditionOrder
    {
        get
        {
            if (conditions.Conditions.Any())
            {
                return conditions.Conditions.Max(c => c.Order) + 1;
            }
            return 0;
        }
    }

    private int nextConditionGroupOrder
    {
        get
        {
            if (conditions.ChildrenGroups.Any())
            {
                return conditions.ChildrenGroups.Max(c => c.Order) + 1;
            }
            return 0;
        }
    }

}
