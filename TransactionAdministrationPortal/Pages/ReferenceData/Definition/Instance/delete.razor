@page "/referencedata/definition/{masterid:long}/instance/{id:long}/delete"
@using TransactionProcessor.Entities
@inject HttpClient Http
@inject IApplicationConfiguration config
@inject IUriHelper UriHelper

<div class="card">
    <div class="card-header h2">
        Item Detail
    </div>
    <div class="card-body">
        @if (loading)
        {
            <loading></loading>
        }
        else if (referenceDataInstance == null)
        {
        <h2>Item not found.</h2>
        }
        else
        {
        <dl class="row">
            @foreach (var field in referenceDataInstance?.ReferenceDataDefinition?.ReferenceDataFieldDefinitions ?? Enumerable.Empty<ReferenceDataFieldDefinition>())
            {
                <dt class="col-2">@field.Name:</dt>
                <dd class="col-10">@referenceDataInstance.ReferenceDataFieldInstances.Single(fieldInstance => fieldInstance.ReferenceDataFieldDefinitionId == field.Id).Value</dd>
            }
        </dl>
        }
    </div>
    <div class="card-footer">
        <button class="btn btn-danger" onclick="@Delete"><span class="oi oi-trash"></span> Confirm Delete</button>
    </div>
</div>

@functions {
    [Parameter]
    public long id { get; set; }

    [Parameter]
    public long masterId { get; set; }

    private string ReturnPath { get => $"/referencedata/definition/{masterId}"; }

    private bool loading = false;

    private ReferenceDataDefinition referenceDataDefinition = new ReferenceDataDefinition();
    private ReferenceDataFieldDefinition[] referenceDataFieldDefinitions = new ReferenceDataFieldDefinition[] { };
    private ReferenceDataInstance referenceDataInstance = new ReferenceDataInstance();
    private ReferenceDataFieldInstance[] referenceDataFieldInstances = new ReferenceDataFieldInstance[] { };

    protected override async Task OnInitAsync()
    {
        referenceDataDefinition = await Http.GetJsonAsync<ReferenceDataDefinition>($"{config.ApiUrl}/referencedata/definition/{masterId}");
        referenceDataFieldDefinitions = await Http.GetJsonAsync<ReferenceDataFieldDefinition[]>($"{config.ApiUrl}/referencedata/definition/{masterId}/field");
        referenceDataInstance = await Http.GetJsonAsync<ReferenceDataInstance>($"{config.ApiUrl}/referencedata/definition/{masterId}/instance/{id}");
        referenceDataFieldInstances = await Http.GetJsonAsync<ReferenceDataFieldInstance[]>($"{config.ApiUrl}/referencedata/definition/{masterId}/instance/{id}/field");
        referenceDataDefinition.ReferenceDataFieldDefinitions = referenceDataFieldDefinitions.ToList();
        referenceDataInstance.ReferenceDataDefinition = referenceDataDefinition;
        referenceDataInstance.ReferenceDataDefinitionId = referenceDataDefinition.Id;
        referenceDataInstance.ReferenceDataFieldInstances = referenceDataFieldInstances.ToList();
        loading = false;
    }

    private async Task Delete()
    {
        referenceDataInstance.ReferenceDataDefinition = null;
        referenceDataInstance.ReferenceDataFieldInstances = referenceDataInstance.ReferenceDataFieldInstances.Select(field => new ReferenceDataFieldInstance { ReferenceDataFieldDefinitionId = field.ReferenceDataFieldDefinitionId, Value = field.Value, Id = field.Id }).ToList();
        var result = await Http.DeleteAsync($"{config.ApiUrl}/referencedata/instance/{id}");
        Back();
    }

    private void Back()
    {
        UriHelper.NavigateTo(ReturnPath);
    }
}